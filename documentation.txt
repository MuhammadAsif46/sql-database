TYPES OF DATABASES:

1. Relational Database.
2. Non-relational Database(NoSQL).

1. Relational Databases: (RDBMS -> Relational Database Management Systems):
    ----> Data stored in tables.
    for example: (most popular)
    -> MySQL DATABASE.
    -> Microsoft SQL Server.
    -> ORACLE.
    -> PostgreSQL DATABASE.

2. Non-relational Databases:
    ----> Data not stored in tables.
    for example: (most popular)
    -> mongoDB


SQL DATABASE DOCS:

1. WHAT IS SQL?
    -> SQL Stands for :- Sturctured Query Language:
    -> SQL is a programming language used to interact with relational databases.

    it is used to perform CRUD operations:
    - Create 
    - Read
    - Update
    - Delete

Step 01: ---- Creating Database ------

    -> Our first SQL Query is :-
    1. CREATE DATABASE db_name
    2. Drop DATABASE db_name


Step 02: ---- Creating Our First Table ------

    1. USE db_name
    2. CREATE TABLE table_name (
        column_name1 datatype constrraint,
        column_name2 datatype constrraint,
        column_name3 datatype constrraint,
    )

    For example :- 

    CREATE TABLE student(
	    id INT PRIMARY KEY,     --> required Unique and not null
        name VARCHAR(50),   
        age INT NOT NULL
    );


Step 03: ---- Inserting Data ------

    1. INSERT INTO student VALUES(1, "ALI",23);
    2. INSERT INTO student VALUES(2, "RAZA",24);

    Print Table:
    SELECT * FROM student;


Step 04: ---- SQL DATATYPES (most popular)------

    -> They define the "type of value" that can be stored in a column.

    DATATYPE           ->            DESCRIPTION                        ->          USAGE   

    1. CHAR    -->  string(0-255), can store characters of fixed length      --->   CHAR(50)
    2. VARCHAR -->  string(0-255), can store characters up to given length   --->   VARCHAR(50)
    3. BLOB    -->  string(0-65535), can store binary large object           --->   BLOB(1000)
    4. INT     -->  integer(-2,147,483,648 to 2,147,483,647)                 --->   INT
    5. BIGINT  -->  integer(-9,223,372,036,854,775,808 to 
                        9,223,372,036,854,775,807)                           --->   BIGINT
    6. TINYINT -->  integer(-128 to 127)                                     --->   TINYINT
    7. BIT     -->  can store x-bit values, x can range from 1 to 64         --->   BIT
    8. FLOAT   -->  decimal number - with precision to 23 digits             --->   FLOAT
    9. DOUBLE  -->  decimal number - with 24 to 53 digits                    --->   DOUBLE
    10.BOOLEAN -->  boolean values 0 or 1                                    --->   BOOLEAN
    11.DATE    -->  date in format of YYYY-MM-DD ranging from
                    1000-01-01 to 9999-12-31                                 --->   DATE
    12.YEAR    -->  year in 4 digits format ranging from 1901 to 2155        --->   YEAR

    Signed & Unsigned data Types:
    1.TINYINT Unsigned  (0 to 255)            only positive numbers
    2.TINYINT Signed    (-128 to 127)         nagative and positive both numbers




    * Describe Data Types:
    1. CHAR: 
        -> Fixed-length data type; always reserves the specified length, padding with spaces if data is shorter.
    2. VARCHAR: 
        -> Variable-length data type; only uses space for actual data, no extra padding.



--------- Types of SQL Commands -----------

1. DDL(Data Defination Language):       ->  create, alter, rename, truncate & drop
2. DQL(Data Query Language):            ->  select
3. DML(Data Manipulation Language):     ->  insert, update and delete
4. DCL(Data Control Language):          ->  grant & revoke permission to users
5. TCL(Transaction Control Language):   ->  start transaction, commit, and rollback


--------- Database related Queries--------

CREATE DATABASE db_name;
CREATE DATABASE "IF NOT EXISTS" db_name;  

DROP DATABASE db_name;
DROP DATABASE "IF EXISTS" db_name;

SHOW DATABASES;
SHOW TABLES;


--------- Tables related Queries--------

1. Create (means):         --> table schema (design) 

-> CREATE TABLE table_name(
	    column_name1 datatype constrraint,
        column_name2 datatype constrraint,
    );


2. Select & View all columns:

-> SELECT * FROM table_name;