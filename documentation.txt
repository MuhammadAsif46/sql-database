TYPES OF DATABASES:

1. Relational Database.
2. Non-relational Database(NoSQL).

1. Relational Databases: (RDBMS -> Relational Database Management Systems):
    ----> Data stored in tables.
    for example: (most popular)
    -> MySQL DATABASE.
    -> Microsoft SQL Server.
    -> ORACLE.
    -> PostgreSQL DATABASE.

2. Non-relational Databases:
    ----> Data not stored in tables.
    for example: (most popular)
    -> mongoDB


SQL DATABASE DOCS:

1. WHAT IS SQL?
    -> SQL Stands for :- Sturctured Query Language:
    -> SQL is a programming language used to interact with relational databases.

    it is used to perform CRUD operations:
    - Create 
    - Read
    - Update
    - Delete

Step 01: ---- Creating Database ------

    -> Our first SQL Query is :-
    1. CREATE DATABASE db_name
    2. Drop DATABASE db_name


Step 02: ---- Creating Our First Table ------

    1. USE db_name
    2. CREATE TABLE table_name (
        column_name1 datatype constrraint,
        column_name2 datatype constrraint,
        column_name3 datatype constrraint,
    )

    For example :- 

    CREATE TABLE student(
	    id INT PRIMARY KEY,     --> required Unique and not null
        name VARCHAR(50),   
        age INT NOT NULL
    );


Step 03: ---- Inserting Data ------

    1. INSERT INTO student VALUES(1, "ALI",23);
    2. INSERT INTO student VALUES(2, "RAZA",24);

    Print Table:
    SELECT * FROM student;


Step 04: ---- SQL DATATYPES (most popular)------

    -> They define the "type of value" that can be stored in a column.

    DATATYPE           ->            DESCRIPTION                        ->          USAGE   

    1. CHAR    -->  string(0-255), can store characters of fixed length      --->   CHAR(50)
    2. VARCHAR -->  string(0-255), can store characters up to given length   --->   VARCHAR(50)
    3. BLOB    -->  string(0-65535), can store binary large object           --->   BLOB(1000)
    4. INT     -->  integer(-2,147,483,648 to 2,147,483,647)                 --->   INT
    5. BIGINT  -->  integer(-9,223,372,036,854,775,808 to 
                        9,223,372,036,854,775,807)                           --->   BIGINT
    6. TINYINT -->  integer(-128 to 127)                                     --->   TINYINT
    7. BIT     -->  can store x-bit values, x can range from 1 to 64         --->   BIT
    8. FLOAT   -->  decimal number - with precision to 23 digits             --->   FLOAT
    9. DOUBLE  -->  decimal number - with 24 to 53 digits                    --->   DOUBLE
    10.BOOLEAN -->  boolean values 0 or 1                                    --->   BOOLEAN
    11.DATE    -->  date in format of YYYY-MM-DD ranging from
                    1000-01-01 to 9999-12-31                                 --->   DATE
    12.YEAR    -->  year in 4 digits format ranging from 1901 to 2155        --->   YEAR

    Signed & Unsigned data Types:
    1.TINYINT Unsigned  (0 to 255)            only positive numbers
    2.TINYINT Signed    (-128 to 127)         nagative and positive both numbers




    * Describe Data Types:
    1. CHAR: 
        -> Fixed-length data type; always reserves the specified length, padding with spaces if data is shorter.
    2. VARCHAR: 
        -> Variable-length data type; only uses space for actual data, no extra padding.



--------- Types of SQL Commands -----------

1. DDL(Data Defination Language):       ->  create, alter, rename, truncate & drop
2. DQL(Data Query Language):            ->  select
3. DML(Data Manipulation Language):     ->  insert, update and delete
4. DCL(Data Control Language):          ->  grant & revoke permission to users
5. TCL(Transaction Control Language):   ->  start transaction, commit, and rollback


--------- Database related Queries--------

CREATE DATABASE db_name;
CREATE DATABASE "IF NOT EXISTS" db_name;  

DROP DATABASE db_name;
DROP DATABASE "IF EXISTS" db_name;

SHOW DATABASES;
SHOW TABLES;


--------- Tables related Queries--------

1. Create (means):         --> table schema (design) 

-> CREATE TABLE table_name(
	    column_name1 datatype constrraint,
        column_name2 datatype constrraint,
    );


2. Select & View all columns:

-> SELECT * FROM table_name;


3. Insert: (follow column order to add row data)

-> INSERT INTO table_name(column_name1, column_name2) 
    VALUES 
    (col1_v1,col2_v1);
    (col1_v2,col2_v2);

    example:
-> INSERT INTO student(rollNo, name) 
    VALUES 
    (101,"abc"),
    (102,"xyz");



------------ KEYS -------------

1.PRIMARY KEY: (main) 
2.FOREIGN KEY:

-> PRIMARY KEY:
      - It is a column (or set of columns) in a table that uniquely identifies each row. (a unique id)
        There is only 1 PK & it should be not null.

-> FOREIGN KEY:
      - A foreign key is a column (or set of columns) in a table that refers to the primary key  id
        There can be multiple FKs.
        FKs can have duplicate& null values.

-> Cascading for FK:
    - On Delete Cascade:
        * When we create a foreign key using this option, it deletes the referencing rows in the child table
        * when the referenced row is deleted in the parent table which has a primary key.

    - On Update Cascade:
        * When we create a foreign key using UPDATE CASCADE the referencing rows are updated in the child.
        * table when the referenced row is updated in the parent table which has a primary key.
    
    - EXAMPLE:
    CREATE TABLE student (
        id INT PRIMARY KEY,
        courseID INT,
        FOREIGN KEY (courseID) REFERENCES course(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
    );


----------- CONSTRAINTS ----------

    - SQL constraints are used to specify rules for data in a table.

    -> Not Null:    --> columns cannot have a null value
    -> Unique:      --> all values in column are different
    -> Primary Key: --> makes a column unique & not null but used only for one
    -> FOREIGN KEY: --> prevent actions that would destroy links between tables
    -> Default:     --> sets the default value of a column
    -> Check:       --> it can limits the values allowed in a column


------------ SELECT IN DETAILS ----------------

    - used to select any data from the database

    -> Basic Syntax:
        - SELECT col1, col2 FROM table_name;

    to select all:
        - SELECT * FROM table_name;

    -> Duplicate values ignore:
        - SELECT DISTINCT city FROM student;

    -> WHERE clause:
        - to define some conditions
        - SELECT col1, col2 FROM table_name WHERE conditions;

    -> WHERE clause:
        - using operator in WHERE
        -> Arithmatic Operators:    -->     +, -, *, / and %
        -> Comparison Operators:    -->     =, !=, >, >=, <, and <=
        -> Logical Operations:      -->     AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY
        -> Bitwise Operations:      -->     & and |

    -> AND operator:        --> to check for both conditions to be true 
    -> OR operator:         --> to check for one of the conditions to be true 
    -> BETWEEN operator:    --> selects for a given range
    -> IN operator:         --> matches any value in the list
    -> NOT operator:        --> to negate the given condition

    -> Limit clause:
        - sets an upper limit on number of (tuples) rows to be returned
        
        Command:
        - SELECT col1, col2 FROM table_name LIMIT number;

    -> Order by clause:
        - to sort in ascending (ASC) or descending order (DESC)
        
        Commands:
        - SELECT col1, col2 FROM table_name ORDER BY col_name(s) ASC;
        - SELECT col1, col2 FROM table_name ORDER BY col_name(s) DESC;

    -> Group by clause:
        - Groups rows that have the same values into summary rows.
        - It collect data from multiple records and groups the result by one or more column.

        *Generally we use group by with some aggregation function.
        -> count number of students in each city
        Command:
        SELECT city, COUNT(name) FROM students GROUP BY city;

    -> Having Clause
        - Similar to Where i.e. applies some condition on rows.
        - Used when we want to apply any condition after grouping.


-------- Aggregate Functions ------------

    -> Aggregate functions perform a calculation on a set of values, and return a single value.
        - COUNT()
        - MAX()
        - MIN()
        - SUM()
        - AVG()

-------- General Order --------------

    SELECT column(s)
    FROM table_name
    WHERE condition
    GROUP BY column(s)
    HAVING condition
    ORDER BY column(s) ASC;


-------- Table Related Queries --------------

        - SET SQL_SAFE_UPDATES = 0; // safe mode ON value 0: by default ON
        - SET SQL_SAFE_UPDATES = 1; // safe mode OF value 1:

        - Update (to update existing rows)
        command:
        UPDATE table_name
        SET col1 = val1, col2 = val2
        WHERE condition;

        - Delete (to delete existing rows)
        DELETE FROM table_name
        WHERE condition;